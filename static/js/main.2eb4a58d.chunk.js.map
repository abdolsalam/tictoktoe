{"version":3,"sources":["components/Tile/Tile.js","components/Board/Board.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Tile","props","tileClick","state","type","changePlayer","tile","player","setState","onClick","this","className","Component","Board","tileIndex","tiles","checkWinner","line","a","finishGame","winner","isFinishGame","resetBoard","initialState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2eb4a58d.chunk.js","sourcesContent":["import React,  { Component } from 'react'\r\nimport './Tile.css';\r\n\r\nclass Tile extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            type: ''\r\n        }\r\n    }\r\n\r\n    tileClick = () => {\r\n        if(this.state.type == ''){\r\n            this.props.changePlayer(this.props.tile)\r\n            \r\n            let player = this.props.player\r\n            this.setState({\r\n                type: player\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n              <div onClick={this.tileClick} className=\"Tile\">\r\n                  <span className=\"TileContent\">{this.state.type}</span>\r\n              </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tile\r\n","import React,  { Component } from 'react'\r\nimport './Board.css';\r\nimport Tile from '../Tile/Tile.js'\r\n\r\nclass Board extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.winner = 'X is winner'\r\n        this.state = this.initialState\r\n    }\r\n\r\n    get initialState() {\r\n        return {\r\n            player: 'X',\r\n            tiles: [\r\n                '','','',\r\n                '','','',\r\n                '','',''\r\n            ],\r\n            isFinishGame: false\r\n        };\r\n      }\r\n\r\n    changePlayer = (tileIndex) => {\r\n        let player = this.state.player == 'X' ? 'O' : 'X'\r\n        let tiles = this.state.tiles\r\n        tiles[tileIndex - 1] = player\r\n\r\n        this.setState({\r\n            player: player,\r\n            tiles\r\n        })\r\n\r\n        this.checkWinner()\r\n    }\r\n\r\n    checkWinner = () => {\r\n        let tiles = this.state.tiles\r\n\r\n        let line = '';\r\n        for (let a = 0; a < 8; a++) {\r\n\t\t\tswitch (a) {\r\n                case 0:\r\n                    line = tiles[0] + tiles[1] + tiles[2]\r\n                    break;\r\n                case 1:\r\n                    line = tiles[3] + tiles[4] + tiles[5]\r\n                    break;\r\n                case 2:\r\n                    line = tiles[6] + tiles[7] + tiles[8]\r\n                    break;\r\n                case 3:\r\n                    line = tiles[0] + tiles[3] + tiles[6]\r\n                    break;\r\n                case 4:\r\n                    line = tiles[1] + tiles[4] + tiles[7]\r\n                    break;\r\n                case 5:\r\n                    line = tiles[2] + tiles[5] + tiles[8]\r\n                    break;\r\n                case 6:\r\n                    line = tiles[0] + tiles[4] + tiles[8]\r\n                    break;\r\n                case 7:\r\n                    line = tiles[2] + tiles[4] + tiles[6]\r\n                    break;\r\n            }\r\n\r\n\t\t\tif (line == 'XXX') {\r\n                this.finishGame('O is winner')\r\n                break\r\n            } else if (line == 'OOO') {\r\n                this.finishGame('X is winner')\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let a = 0; a < 9; a++) {\r\n            if(tiles[a] == ''){\r\n                break\r\n            } else if(a == 8){\r\n                this.finishGame('Game is draw, no winner')\r\n            }\r\n        }\r\n    }\r\n\r\n    finishGame = (winner) => {\r\n        this.winner = winner\r\n        this.setState({\r\n          isFinishGame: true\r\n        })\r\n    }\r\n\r\n    resetBoard = () => {\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Board\">\r\n                {\r\n                    !this.state.isFinishGame ? \r\n                        <div className=\"Tiles\">\r\n                            <Tile tile=\"1\" changePlayer={this.changePlayer} player={this.state.player} /> \r\n                            <Tile tile=\"2\" changePlayer={this.changePlayer} player={this.state.player} /> \r\n                            <Tile tile=\"3\" changePlayer={this.changePlayer} player={this.state.player} />\r\n                \r\n                            <Tile tile=\"4\" changePlayer={this.changePlayer} player={this.state.player} /> \r\n                            <Tile tile=\"5\" changePlayer={this.changePlayer} player={this.state.player} /> \r\n                            <Tile tile=\"6\" changePlayer={this.changePlayer} player={this.state.player} />\r\n                \r\n                            <Tile tile=\"7\" changePlayer={this.changePlayer} player={this.state.player} /> \r\n                            <Tile tile=\"8\" changePlayer={this.changePlayer} player={this.state.player} /> \r\n                            <Tile tile=\"9\" changePlayer={this.changePlayer} player={this.state.player} />\r\n                        </div> :\r\n                        <div className=\"FinishGame\">\r\n                            {this.winner}\r\n                            <button className=\"NewGameButton\" onClick={this.resetBoard}>New game</button>\r\n                      </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board\r\n","import React, {Component} from 'react'\nimport './App.css'\nimport Board from '../Board/Board.js'\n\nclass App extends Component{\n\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n      return (\n          <div className=\"App\">\n            <div className=\"Header\">XO Game, enjoy it.</div>\n            <Board  />    \n            <div className=\"Footer\">Developed by Abdolsalam Dehvari</div>\n          </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}